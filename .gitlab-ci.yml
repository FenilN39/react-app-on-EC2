stages:
  - build
  - docker-build
  - push
  - deploy

# build:
#   stage: build
#   image: node
#   script: 
#     - echo "Start building App"
#     - npm install
#     - npm run build
#     - echo "Build successfully!"
#   artifacts:
#     expire_in: 1 hour
#     paths:
#       - build
#       - node_modules/

# docker-build:
#   stage: docker-build
#   image: docker:19.03.12
#   services:
#     - docker:dind
#   before_script:
#     - echo $CI_REGISTRY_PASSWORD |docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
#   script:
#     - docker build --pull -t $CI_REGISTRY_IMAGE .
#     - docker push $CI_REGISTRY_IMAGE
#     - echo "Registry image:" $CI_REGISTRY_IMAGE




# Push_latest:
#   variables:
#     # We are just playing with Docker here. 
#     # We do not need GitLab to clone the source code.
#     GIT_STRATEGY: none
#   stage: push
#   image: docker:latest
#   only:
#     # Only "master" should be tagged "latest"
#     - master
#   script:
#     # Because we have no guarantee that this job will be picked up by the same runner 
#     # that built the image in the previous step, we pull it again locally
#     - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
#     # Then we tag it "latest"
#     - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
#     # Annnd we push it.
#     - docker push $CI_REGISTRY_IMAGE:latest

deploy:
  stage: deploy
  image: kroniak/ssh-client
  before_script:
    - echo "deploying app"
  script:
    - chmod 400 $LOGIN_FILE
    - ssh -o StrictHostKeyChecking=no -i $LOGIN_FILE ubuntu@$SERVER_IP 
    - ssh -o StrictHostKeyChecking=no -i $LOGIN_FILE ubuntu@$SERVER_IP "docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY" 
    - ssh -o StrictHostKeyChecking=no -i $LOGIN_FILE ubuntu@$SERVER_IP "sudo docker pull $CI_REGISTRY_IMAGE:latest"
    - ssh -o StrictHostKeyChecking=no -i $LOGIN_FILE ubuntu@$SERVER_IP "sudo docker stop newcontainer || true && docker rm newcontainer || true" 
    - ssh -o StrictHostKeyChecking=no -i $LOGIN_FILE ubuntu@$SERVER_IP "sudo docker run -p 8080:8080 --name newcontainer registry.gitlab.com/feniln39/dockerfinal:latest"
  
# image: docker:20

# stages:
#   - build
#   - push

# variables:
#   # fill those if you have a proxy in your environment
#   http_proxy: ""
#   https_proxy: ""
#   no_proxy: ""

# # Use this if your GitLab runner does not use socket binding
# # services:
# #   - docker:dind

# before_script:
#   # docker login asks for the password to be passed through stdin for security
#   # we use $CI_REGISTRY_PASSWORD here which is a special variable provided by GitLab
#   # https://docs.gitlab.com/ce/ci/variables/predefined_variables.html
#   - echo -n $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY


# # Here, the goal is to tag the "master" branch as "latest"
# Push latest:
#   variables:
#     # We are just playing with Docker here. 
#     # We do not need GitLab to clone the source code.
#     GIT_STRATEGY: none
#   stage: push
#   only:
#     # Only "master" should be tagged "latest"
#     - main
#   script:
#     # Because we have no guarantee that this job will be picked up by the same runner 
#     # that built the image in the previous step, we pull it again locally
#     - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
#     # Then we tag it "latest"
#     - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
#     # Annnd we push it.
#     - docker push $CI_REGISTRY_IMAGE:latest

# # Finally, the goal here is to Docker tag any Git tag
# # GitLab will start a new pipeline everytime a Git tag is created, which is pretty awesome
# Push tag:
#   variables:
#     # Again, we do not need the source code here. Just playing with Docker.
#     GIT_STRATEGY: none
#   stage: push
#   only:
#     # We want this job to be run on tags only.
#     - tags
#   script:
#     - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
#     - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
#     - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME





















